/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(postorder.length==0)
        {
            return null;
        }
        int index=0;
        int r=postorder[postorder.length-1];
        for(int i=0;i<inorder.length;i++)
        {
            if(inorder[i]==r)
            {
                index=i;
            }
        }
        TreeNode newnode=new TreeNode(r);
        int rs=postorder.length-index;
        newnode.left=buildTree(Arrays.copyOfRange(inorder,0,index),Arrays.copyOfRange(postorder,0,index));
        newnode.right=buildTree(Arrays.copyOfRange(inorder,index+1,inorder.length),Arrays.copyOfRange(postorder,postorder.length-rs,postorder.length-1));
        return newnode;

        
   
    }
}
