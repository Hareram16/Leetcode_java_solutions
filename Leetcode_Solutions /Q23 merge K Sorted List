/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null||lists.length==0)
        {
            return null;
        }
        return mergehelper(lists,0,lists.length-1);

        
    }
    public static ListNode mergehelper(ListNode []lists,int s,int e){
        if(s==e)
        {
            return lists[s];
        }
        if(s+1==e)
        {
               return mergelist(lists[s],lists[e]); 
        }
        int mid=s+(e-s)/2;
        ListNode left= mergehelper(lists,s,mid);
         ListNode right=mergehelper(lists,mid+1,e);
        return mergelist(left,right);
    }
   public static ListNode mergelist(ListNode left,ListNode right)
    {
        ListNode dummy=new ListNode(0);
        ListNode curr=dummy;
        while(left!=null&&right!=null){
            if(left.val<right.val)
            {
               curr.next=left;
               left=left.next;
            }
            else
            {
                 curr.next=right;
               right=right.next;
            }
            curr=curr.next;
        }
        // curr.next=(left!=null)?left:right;
        if(left!=null)
        {
            curr.next=left;
        }
        else
        { curr.next=right;
               

        }
        return dummy.next;
    }
}
