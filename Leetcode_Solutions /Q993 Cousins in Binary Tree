/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        TreeNode xx=findnode(root,x);
        TreeNode yy=findnode(root,y);
        return ((level(root,xx,0)==level(root,yy,0))&&(!issiblings(root,xx,yy)));
        
    }
    TreeNode findnode(TreeNode node,int a)
    {
        if(node==null)
        {
            return null;
        }
        if(node.val==a)
        {
            return node;
        }
        TreeNode n=findnode(node.left,a);
        if(n!=null)
        {
            return n;
        }
        return findnode(node.right,a);
    }
    boolean issiblings(TreeNode root,TreeNode x,TreeNode y)
    {
        if(root==null)
        {
            return false;
        }
        return ( (root.left==x&&root.right==y)||(root.left==y && root.right==x)||issiblings(root.left,x,y)||issiblings(root.right,x,y)

        );
    }
    int level(TreeNode root,TreeNode x, int lev)
    {

if(root==null)
{
    return 0;
}
if(root==x)
{
    return lev;
}
int l=level(root.left,x,lev+1);
if(l!=0)
{
    return l;
}
return level(root.right,x,lev+1);
    }
}
